// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id                 String  @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
   id                 String  @id @default(cuid()) @map("_id")
  name          String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin    Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
 order Order[]
 likes Likes []
  @@map("users")
}
 
model VerificationToken {
    id                 String  @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product{
     id                 String  @id @default(cuid()) @map("_id")
     title String
     img String
     price Int
     likeId String?
     options Json[]
     desc String
     isFeatured Boolean @default(false)
     slug slugType 
      menu Menu @relation(fields: [slug],references: [menuSlug])
     createdAt DateTime @default(now())
     likes Likes[]
}
enum slugType {
pizzas
burgers
pastas
}

model Menu{
     id   String  @id @default(cuid()) @map("_id")
     title String
     desc String
     img String
     menuSlug slugType  @unique
     product Product[]
     textColor String
     createdAt DateTime @default(now())
}

model Order {
  id   String  @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  price Int
  status String
  products Json[]
  userEmail String
  intent_id String? @unique
  user User @relation(fields: [userEmail],references: [email])
}

model Likes {
    id   String  @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    userId String
    productId String
   
    user User @relation(fields: [userId],references: [id])
    product Product @relation(fields: [productId],references: [id])
    @@unique([userId,productId])
}